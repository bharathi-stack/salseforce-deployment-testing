# name: Deploy to Prod

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
      
#       - name: Install Salesforce CLI
#         run: |
#           npm install -g @salesforce/cli
      
#       - name: Authenticate to Prod Org
#         run: |
#           echo "${{ secrets.SFDX_AUTH_URL }}" > auth_url.txt
#           sf org login sfdx-url --sfdx-url-file auth_url.txt --alias ProdOrg
      
#       - name: Deploy to Prod
#         run: |
#           sf project deploy start --target-org ProdOrg --source-dir force-app




name: Deploy Delta to Prod

on:
  push:
    branches:
      - main  # Triggers only on push to the 'main' branch

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Need full history for delta comparison

      # 2. Install the CLASSIC Salesforce CLI (sfdx)
      - name: Install Salesforce CLI
        run: |
          # We are installing the classic sfdx-cli, NOT @salesforce/cli
          npm install -g sfdx-cli

      # 3. Install the Delta plugin
      - name: Install sfdx-git-delta plugin
        run: |
          # Use the classic 'sfdx plugins:install' command
          echo y | sfdx plugins:install sfdx-git-delta

      # 4. Install jq (a tool to parse JSON output)
      - name: Install jq
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      # 5. Authenticate to your Prod Org
      - name: Authenticate to Prod Org
        run: |
          # Use the classic 'sfdx force:auth:sfdxurl:store' command
          echo "${{ secrets.SFDX_AUTH_URL }}" > auth_url.txt
          sfdx force:auth:sfdxurl:store -f auth_url.txt -a ProdOrg

      # 6. Create the delta package
      - name: Generate delta package
        run: |
          # This command will now work because we are using sfdx-cli
          sfdx git:delta --from HEAD~1 --to HEAD --output delta-package --src force-app

      # 6.5. Check if delta-package was created
      - name: Check for delta changes
        id: check_delta
        run: |
          if [ -d "delta-package" ]; then
            echo "Delta changes found. Proceeding with deployment."
            echo "delta_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No delta changes detected. Skipping deployment."
            echo "delta_exists=false" >> $GITHUB_OUTPUT
          fi


      # 7. Validate Delta against Prod (Best Practice)
      - name: Validate Delta against Prod
        id: validate
        if: steps.check_delta.outputs.delta_exists == 'true'  # <-- ADD THIS LINE
        run: |
          # ... (rest of your step stays the same)
          VALIDATE_JSON=$(sfdx force:mdapi:deploy --deploydir delta-package --testlevel RunLocalTests --targetusername ProdOrg --checkonly --json)
          # ...

      # 8. Deploy Quick (using the Validation ID)
      - name: Deploy Quick (using Validation ID)
        # We need both conditions to be true to run this step
        if: steps.validate.outputs.job-id && steps.check_delta.outputs.delta_exists == 'true'  # <-- UPDATE THIS LINE
        run: |
          # ... (rest of your step stays the same)